name: Test and Coverage (with WireMock)

on:
  push:
    branches: [main]
  pull_request:
    types: [edited, opened, synchronize, reopened, ready_for_review]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Download WireMock standalone jar
        run: |
          curl -L -o wiremock.jar https://repo1.maven.org/maven2/com/github/tomakehurst/wiremock-jre8-standalone/2.35.0/wiremock-jre8-standalone-2.35.0.jar

      - name: Start WireMock
        run: |
          java -jar wiremock.jar --port 8080 &
          echo $! > wiremock.pid

      - name: Wait for WireMock to be ready
        run: |
          for i in {1..10}; do
            if curl --silent http://localhost:8080/__admin; then
              echo "WireMock is ready"
              exit 0
            fi
            sleep 1
          done
          echo "WireMock did not start in time" >&2
          exit 1

      - name: Run tests with coverage
        run: yarn test:coverage

      - name: Stop WireMock
        run: |
          kill $(cat wiremock.pid)

      - name: Enforce ≥80% coverage
        run: |
          node -e "
            const { readFileSync } = require('fs');
            const { total } = JSON.parse(
              readFileSync('./coverage/coverage-summary.json', 'utf8')
            );
            const thresholds = {
              lines: 80,
              statements: 80,
              functions: 80,
              branches: 80,
            };
            console.log('Coverage Report:');
            Object.entries(total).forEach(([metric, data]) => {
              console.log(`${metric}: ${data.pct}%`);
            });
            const failed = Object.entries(thresholds)
              .filter(([metric, threshold]) => total[metric].pct < threshold)
              .map(([metric]) => metric);
            if (failed.length > 0) {
              console.error('❌ Coverage below 80% for:', failed.join(', '));
              process.exit(1);
            } else {
              console.log('✅ Coverage check passed.');
            }
          "
        timeout-minutes: 1

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7